<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="dao.SalaryMapper">
  <resultMap id="BaseResultMap" type="entity.Salary">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="create_date" jdbcType="TIMESTAMP" property="createDate" />
    <result column="modify_date" jdbcType="TIMESTAMP" property="modifyDate" />
    <result column="base_pay" jdbcType="DOUBLE" property="basePay" />
    <result column="overtime_pay" jdbcType="DOUBLE" property="overtimePay" />
    <result column="misstime_pay" jdbcType="DOUBLE" property="misstimePay" />
    <result column="attendance_pay" jdbcType="DOUBLE" property="attendancePay" />
    <result column="insurance_pay" jdbcType="DOUBLE" property="insurancePay" />
    <result column="emp_id" jdbcType="INTEGER" property="empId" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, create_date, modify_date, base_pay, overtime_pay, misstime_pay, attendance_pay, 
    insurance_pay, emp_id
  </sql>
  <select id="selectByExample" parameterType="entity.SalaryExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from salary
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from salary
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from salary
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="entity.SalaryExample">
    delete from salary
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="entity.Salary">
    insert into salary (id, create_date, modify_date, 
      base_pay, overtime_pay, misstime_pay, 
      attendance_pay, insurance_pay, emp_id,time
      )
    values (#{id,jdbcType=INTEGER}, #{createDate,jdbcType=TIMESTAMP}, #{modifyDate,jdbcType=TIMESTAMP}, 
      #{basePay,jdbcType=DOUBLE}, #{overtimePay,jdbcType=DOUBLE}, #{misstimePay,jdbcType=DOUBLE}, 
      #{attendancePay,jdbcType=DOUBLE}, #{insurancePay,jdbcType=DOUBLE}, #{empId,jdbcType=INTEGER},#{time,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="entity.Salary">
    insert into salary
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="createDate != null">
        create_date,
      </if>
      <if test="modifyDate != null">
        modify_date,
      </if>
      <if test="basePay != null">
        base_pay,
      </if>
      <if test="overtimePay != null">
        overtime_pay,
      </if>
      <if test="misstimePay != null">
        misstime_pay,
      </if>
      <if test="attendancePay != null">
        attendance_pay,
      </if>
      <if test="insurancePay != null">
        insurance_pay,
      </if>
      <if test="empId != null">
        emp_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="createDate != null">
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="modifyDate != null">
        #{modifyDate,jdbcType=TIMESTAMP},
      </if>
      <if test="basePay != null">
        #{basePay,jdbcType=DOUBLE},
      </if>
      <if test="overtimePay != null">
        #{overtimePay,jdbcType=DOUBLE},
      </if>
      <if test="misstimePay != null">
        #{misstimePay,jdbcType=DOUBLE},
      </if>
      <if test="attendancePay != null">
        #{attendancePay,jdbcType=DOUBLE},
      </if>
      <if test="insurancePay != null">
        #{insurancePay,jdbcType=DOUBLE},
      </if>
      <if test="empId != null">
        #{empId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="entity.SalaryExample" resultType="java.lang.Long">
    select count(*) from salary
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update salary
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.createDate != null">
        create_date = #{record.createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.modifyDate != null">
        modify_date = #{record.modifyDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.basePay != null">
        base_pay = #{record.basePay,jdbcType=DOUBLE},
      </if>
      <if test="record.overtimePay != null">
        overtime_pay = #{record.overtimePay,jdbcType=DOUBLE},
      </if>
      <if test="record.misstimePay != null">
        misstime_pay = #{record.misstimePay,jdbcType=DOUBLE},
      </if>
      <if test="record.attendancePay != null">
        attendance_pay = #{record.attendancePay,jdbcType=DOUBLE},
      </if>
      <if test="record.insurancePay != null">
        insurance_pay = #{record.insurancePay,jdbcType=DOUBLE},
      </if>
      <if test="record.empId != null">
        emp_id = #{record.empId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update salary
    set id = #{record.id,jdbcType=INTEGER},
      create_date = #{record.createDate,jdbcType=TIMESTAMP},
      modify_date = #{record.modifyDate,jdbcType=TIMESTAMP},
      base_pay = #{record.basePay,jdbcType=DOUBLE},
      overtime_pay = #{record.overtimePay,jdbcType=DOUBLE},
      misstime_pay = #{record.misstimePay,jdbcType=DOUBLE},
      attendance_pay = #{record.attendancePay,jdbcType=DOUBLE},
      insurance_pay = #{record.insurancePay,jdbcType=DOUBLE},
      emp_id = #{record.empId,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="entity.Salary">
    update salary
    <set>
      <if test="createDate != null">
        create_date = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="modifyDate != null">
        modify_date = #{modifyDate,jdbcType=TIMESTAMP},
      </if>
      <if test="basePay != null">
        base_pay = #{basePay,jdbcType=DOUBLE},
      </if>
      <if test="overtimePay != null">
        overtime_pay = #{overtimePay,jdbcType=DOUBLE},
      </if>
      <if test="misstimePay != null">
        misstime_pay = #{misstimePay,jdbcType=DOUBLE},
      </if>
      <if test="attendancePay != null">
        attendance_pay = #{attendancePay,jdbcType=DOUBLE},
      </if>
      <if test="insurancePay != null">
        insurance_pay = #{insurancePay,jdbcType=DOUBLE},
      </if>
      <if test="empId != null">
        emp_id = #{empId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="entity.Salary">
    update salary
    set create_date = #{createDate,jdbcType=TIMESTAMP},
      modify_date = #{modifyDate,jdbcType=TIMESTAMP},
      base_pay = #{basePay,jdbcType=DOUBLE},
      overtime_pay = #{overtimePay,jdbcType=DOUBLE},
      misstime_pay = #{misstimePay,jdbcType=DOUBLE},
      attendance_pay = #{attendancePay,jdbcType=DOUBLE},
      insurance_pay = #{insurancePay,jdbcType=DOUBLE},
      emp_id = #{empId,jdbcType=INTEGER},
      time = #{time,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="findAllBySplit" resultMap="BaseResultMap">
    select * from salary limit #{currentPage},#{lineSize}
  </select>


  <select id="getAllCount" resultType="java.lang.Integer">
    SELECT COUNT(*) FROM salary
  </select>
</mapper>